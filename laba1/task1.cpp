#include <iostream> // Подключаем библиотеку для ввода/вывода
#include <cstdlib>  // Подключаем библиотеку для работы с rand() и srand()
#include <ctime>    // Подключаем библиотеку для работы со временем

using namespace std; // Используем стандартное пространство имен, чтобы избежать дублирования

// Функция для сортировки массива с использованием сортировки выбором
void selectionSort(int arr[], int n) {
    // Внешний цикл для перебора каждого элемента массива
    for (int i = 0; i < n - 1; i++) {
        // Инициализация минимального элемента текущим индексом
        int minIndex = i;
        // Внутренний цикл для поиска минимального элемента
        for (int j = i + 1; j < n; j++) {
            // Если найден элемент меньше, обновляем minIndex
            if (arr[j] < arr[minIndex]) {
                minIndex = j; // Обновляем индекс минимального элемента
            }
        }
        // Если найденный минимальный элемент не равен текущему элементу,
        // меняем их местами
        if (minIndex != i) {
            int temp = arr[i];
            arr[i] = arr[minIndex];
            arr[minIndex] = temp; // Обмен значениями между arr[i] и arr[minIndex]
        }
    }
}

// Функция для вывода элементов массива на экран
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " "; // Выводим каждый элемент массива
    }
    cout << endl; // Переход на новую строку после вывода массива
}

int main() {
    const int SIZE = 10; // Определяем размер массива (10 элементов)
    int arr[SIZE]; // Объявляем массив целых чисел размером SIZE

    // Инициализация генератора случайных чисел
    srand(static_cast<unsigned>(time(0))); // Устанавливаем начальное значение для генератора  из реального времени

    // Заполняем массив случайными целыми числами в диапазоне от 2 до 103
    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 102 + 2; // rand() % 102 даст числа от 0 до 101, прибавляем 2 для перехода к диапазону [2, 103]
    }

    // Выводим исходный массив
    cout << "Исходный массив: ";
    printArray(arr, SIZE); // Вызов функции вывода массива

    // Сортируем массив
    selectionSort(arr, SIZE); // Вызов функции сортировки
    cout << "Отсортированный массив: "; // Выводим сообщение перед выводом отсортированного массива
    printArray(arr, SIZE); // Вызов функции для показа отсортированного массива

    return 0; // Завершение работы программы
}
